/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Returning a registered resource from the Registration API
 */
export type RegisteredResource =
  | NodeResource
  | DeviceResource
  | SourceResource
  | FlowResource
  | SenderResource
  | ReceiverResource;
/**
 * Describes the Node and the services which run on it
 */
export type NodeResource = BaseResource & {
  /**
   * HTTP access href for the Node's API (deprecated)
   */
  href: string;
  /**
   * Node hostname (optional, deprecated)
   */
  hostname?: string;
  /**
   * URL fragments required to connect to the Node API
   */
  api: {
    /**
     * Supported API versions running on this Node
     */
    versions: string[];
    /**
     * Host, port and protocol details required to connect to the API
     */
    endpoints: {
      /**
       * IP address or hostname which the Node API is running on
       */
      host: (
        | {
            [k: string]: unknown;
          }
        | {
            [k: string]: unknown;
          }
        | {
            [k: string]: unknown;
          }
      ) &
        string;
      /**
       * Port number which the Node API is running on
       */
      port: number;
      /**
       * Protocol supported by this instance of the Node API
       */
      protocol: "http" | "https";
      /**
       * This endpoint requires authorization
       */
      authorization?: boolean;
      [k: string]: unknown;
    }[];
    [k: string]: unknown;
  };
  /**
   * Capabilities (not yet defined)
   */
  caps: {
    [k: string]: unknown;
  };
  /**
   * Array of objects containing a URN format type and href
   */
  services: {
    /**
     * URL to reach a service running on the Node
     */
    href: string;
    /**
     * URN identifying the type of service
     */
    type: string;
    /**
     * This endpoint requires authorization
     */
    authorization?: boolean;
    [k: string]: unknown;
  }[];
  /**
   * Clocks made available to Devices owned by this Node
   */
  clocks: (ClockWithNoExternalReference | PTPClock)[];
  /**
   * Network interfaces made available to devices owned by this Node. Port IDs and Chassis IDs are used to inform topology discovery via IS-06, and require that interfaces implement ARP at a minimum, and ideally LLDP.
   */
  interfaces: {
    /**
     * Chassis ID of the interface, as signalled in LLDP from this node. Set to null where LLDP is unsuitable for use (ie. virtualised environments)
     */
    chassis_id: string | string | null;
    /**
     * Port ID of the interface, as signalled in LLDP or via ARP responses from this node. Must be a MAC address
     */
    port_id: string;
    /**
     * Name of the interface (unique in scope of this node).  This attribute is used by sub-resources of this node such as senders and receivers to refer to interfaces to which they are bound.
     */
    name: string;
    attached_network_device?: {
      /**
       * Chassis ID of the attached network device, as signalled in LLDP received by this Node.
       */
      chassis_id: string | string;
      /**
       * Port ID of the attached network device, as signalled in LLDP received by this Node.
       */
      port_id: string | string;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  }[];
  [k: string]: unknown;
};
/**
 * Describes a Device
 */
export type DeviceResource = BaseResource & {
  /**
   * Device type URN
   */
  type: {
    [k: string]: unknown;
  } & string;
  /**
   * Globally unique identifier for the Node which initially created the Device. This attribute is used to ensure referential integrity by registry implementations.
   */
  node_id: string;
  /**
   * UUIDs of Senders attached to the Device (deprecated)
   */
  senders: string[];
  /**
   * UUIDs of Receivers attached to the Device (deprecated)
   */
  receivers: string[];
  /**
   * Control endpoints exposed for the Device
   */
  controls: {
    /**
     * URL to reach a control endpoint, whether http or otherwise
     */
    href: string;
    /**
     * URN identifying the control format
     */
    type: string;
    /**
     * This endpoint requires authorization
     */
    authorization?: boolean;
    [k: string]: unknown;
  }[];
  [k: string]: unknown;
};
/**
 * Describes a Source
 */
export type SourceResource = GenericSourceResource | AudioSourceResource | DataSourceResource;
/**
 * Describes a generic Source
 */
export type GenericSourceResource = SourceResource1 & {
  /**
   * Format of the data coming from the Source as a URN
   */
  format: "urn:x-nmos:format:video" | "urn:x-nmos:format:mux";
  [k: string]: unknown;
};
/**
 * Describes a Source
 */
export type SourceResource1 = BaseResource & {
  /**
   * Maximum number of Grains per second for Flows derived from this Source. Corresponding Flow Grain rates may override this attribute. Grain rate matches the frame rate for video (see NMOS Content Model). Specified for periodic Sources only.
   */
  grain_rate?: {
    /**
     * Numerator
     */
    numerator: number;
    /**
     * Denominator
     */
    denominator?: number;
    [k: string]: unknown;
  };
  /**
   * Capabilities (not yet defined)
   */
  caps: {
    [k: string]: unknown;
  };
  /**
   * Globally unique identifier for the Device which initially created the Source. This attribute is used to ensure referential integrity by registry implementations.
   */
  device_id: string;
  /**
   * Array of UUIDs representing the Source IDs of Grains which came together at the input to this Source (may change over the lifetime of this Source)
   */
  parents: string[];
  /**
   * Reference to clock in the originating Node
   */
  clock_name: string | null;
  [k: string]: unknown;
};
/**
 * Describes an audio Source
 */
export type AudioSourceResource = SourceResource1 & {
  /**
   * Format of the data coming from the Source as a URN
   */
  format: "urn:x-nmos:format:audio";
  /**
   * Array of objects describing the audio channels
   */
  channels: [Component, ...Component[]];
  [k: string]: unknown;
};
/**
 * Describes a data Source
 */
export type DataSourceResource = SourceResource1 & {
  /**
   * Format of the data coming from the Source as a URN
   */
  format: "urn:x-nmos:format:data";
  /**
   * Event type generated by this Source, if applicable
   */
  event_type?: string;
  [k: string]: unknown;
};
/**
 * Describes a Flow
 */
export type FlowResource =
  | RawVideoFlowResource
  | CodedVideoFlowResource
  | RawAudioFlowResource
  | CodedAudioFlowResource
  | GenericDataFlowResource
  | SDIAncillaryFlowResource
  | JSONBasedFlowResource
  | MuxFlowResource;
/**
 * Describes a raw Video Flow
 */
export type RawVideoFlowResource = VideoFlowResource & {
  /**
   * Subclassification of the format using IANA assigned media types
   */
  media_type: "video/raw";
  /**
   * Array of objects describing the components
   */
  components: [Component1, ...Component1[]];
  [k: string]: unknown;
};
/**
 * Describes a Video Flow
 */
export type VideoFlowResource = FlowResource1 & {
  /**
   * Format of the data coming from the Flow as a URN
   */
  format: "urn:x-nmos:format:video";
  /**
   * Width of the picture in pixels
   */
  frame_width: number;
  /**
   * Height of the picture in pixels
   */
  frame_height: number;
  /**
   * Interlaced video mode for frames in this Flow
   */
  interlace_mode?: "progressive" | "interlaced_tff" | "interlaced_bff" | "interlaced_psf";
  /**
   * Colorspace used for the video. Any values not defined in the enum should be defined in the NMOS Parameter Registers
   */
  colorspace: (
    | ("BT601" | "BT709" | "BT2020" | "BT2100")
    | {
        [k: string]: unknown;
      }
  ) &
    string;
  /**
   * Transfer characteristic. Any values not defined in the enum should be defined in the NMOS Parameter Registers
   */
  transfer_characteristic?: (
    | ("SDR" | "HLG" | "PQ")
    | {
        [k: string]: unknown;
      }
  ) &
    string;
  [k: string]: unknown;
};
/**
 * Describes a Flow
 */
export type FlowResource1 = BaseResource & {
  /**
   * Number of Grains per second for this Flow. Must be an integer division of, or equal to the Grain rate specified by the parent Source. Grain rate matches the frame rate for video (see NMOS Content Model). Specified for periodic Flows only.
   */
  grain_rate?: {
    /**
     * Numerator
     */
    numerator: number;
    /**
     * Denominator
     */
    denominator?: number;
    [k: string]: unknown;
  };
  /**
   * Globally unique identifier for the Source which initially created the Flow. This attribute is used to ensure referential integrity by registry implementations (v1.0 only).
   */
  source_id: string;
  /**
   * Globally unique identifier for the Device which initially created the Flow. This attribute is used to ensure referential integrity by registry implementations (v1.1 onwards).
   */
  device_id: string;
  /**
   * Array of UUIDs representing the Flow IDs of Grains which came together to generate this Flow (may change over the lifetime of this Flow)
   */
  parents: string[];
  [k: string]: unknown;
};
/**
 * Describes a coded Video Flow
 */
export type CodedVideoFlowResource = VideoFlowResource & {
  /**
   * Subclassification of the format using IANA assigned media types
   */
  media_type: (
    | ("video/H264" | "video/vc2")
    | {
        [k: string]: unknown;
      }
  ) &
    string;
  [k: string]: unknown;
};
/**
 * Describes a raw audio Flow
 */
export type RawAudioFlowResource = AudioFlowResource & {
  /**
   * Subclassification of the format using IANA assigned media types
   */
  media_type: (
    | ("audio/L24" | "audio/L20" | "audio/L16" | "audio/L8")
    | {
        [k: string]: unknown;
      }
  ) &
    string;
  /**
   * Bit depth of the audio samples
   */
  bit_depth: number;
  [k: string]: unknown;
};
/**
 * Describes an audio Flow
 */
export type AudioFlowResource = FlowResource1 & {
  /**
   * Format of the data coming from the Flow as a URN
   */
  format: "urn:x-nmos:format:audio";
  /**
   * Number of audio samples per second for this Flow
   */
  sample_rate: {
    /**
     * Numerator
     */
    numerator: number;
    /**
     * Denominator
     */
    denominator?: number;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Describes a coded audio Flow
 */
export type CodedAudioFlowResource = AudioFlowResource & {
  /**
   * Subclassification of the format using IANA assigned media types
   */
  media_type: string;
  [k: string]: unknown;
};
/**
 * Describes a generic data Flow
 */
export type GenericDataFlowResource = FlowResource1 & {
  /**
   * Format of the data coming from the Flow as a URN
   */
  format: "urn:x-nmos:format:data";
  /**
   * Subclassification of the format using IANA assigned media types
   */
  media_type: string;
  [k: string]: unknown;
};
/**
 * Describes an SDI ancillary Flow
 */
export type SDIAncillaryFlowResource = FlowResource1 & {
  /**
   * Format of the data coming from the Flow as a URN
   */
  format: "urn:x-nmos:format:data";
  /**
   * Subclassification of the format using IANA assigned media types
   */
  media_type: "video/smpte291";
  /**
   * List of Data identification and Secondary data identification words
   */
  DID_SDID?: Entry[];
  [k: string]: unknown;
};
/**
 * Describes a JSON based Flow
 */
export type JSONBasedFlowResource = FlowResource1 & {
  /**
   * Format of the data coming from the Flow as a URN
   */
  format: "urn:x-nmos:format:data";
  /**
   * Subclassification of the format using IANA assigned media types
   */
  media_type: "application/json";
  /**
   * Event type generated by this Flow, if applicable
   */
  event_type?: string;
  [k: string]: unknown;
};
/**
 * Describes a mux Flow
 */
export type MuxFlowResource = FlowResource1 & {
  /**
   * Format of the data coming from the Flow as a URN
   */
  format: "urn:x-nmos:format:mux";
  /**
   * Subclassification of the format using IANA assigned media types
   */
  media_type: (
    | "video/SMPTE2022-6"
    | {
        [k: string]: unknown;
      }
  ) &
    string;
  [k: string]: unknown;
};
/**
 * Describes a sender
 */
export type SenderResource = BaseResource & {
  /**
   * Capabilities of this sender
   */
  caps?: {
    [k: string]: unknown;
  };
  /**
   * ID of the Flow currently passing via this Sender
   */
  flow_id: string | null;
  /**
   * Transport type used by the Sender in URN format
   */
  transport: {
    [k: string]: unknown;
  } & string;
  /**
   * Device ID which this Sender forms part of. This attribute is used to ensure referential integrity by registry implementations.
   */
  device_id: string;
  /**
   * HTTP(S) accessible URL to a file describing how to connect to the Sender.
   */
  manifest_href: string | null;
  /**
   * Binding of Sender egress ports to interfaces on the parent Node.
   */
  interface_bindings: string[];
  /**
   * Object containing the 'receiver_id' currently subscribed to (unicast only).
   */
  subscription: {
    /**
     * UUID of the Receiver that this Sender is currently subscribed to
     */
    receiver_id: string | null;
    /**
     * Sender is enabled and configured to send data
     */
    active: boolean;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Describes a Receiver
 */
export type ReceiverResource =
  | VideoReceiverResource
  | AudioReceiverResource
  | DataReceiverResource
  | MuxReceiverResource;
/**
 * Describes a video Receiver
 */
export type VideoReceiverResource = ReceiverResource1 & {
  /**
   * Type of Flow accepted by the Receiver as a URN
   */
  format: "urn:x-nmos:format:video";
  /**
   * Capabilities
   */
  caps: {
    /**
     * Subclassification of the formats accepted using IANA assigned media types
     */
    media_types?: [
      (
        | ("video/raw" | "video/H264" | "video/vc2")
        | {
            [k: string]: unknown;
          }
      ) &
        string,
      ...((
        | ("video/raw" | "video/H264" | "video/vc2")
        | {
            [k: string]: unknown;
          }
      ) &
        string)[]
    ];
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Describes a receiver
 */
export type ReceiverResource1 = BaseResource & {
  /**
   * Device ID which this Receiver forms part of. This attribute is used to ensure referential integrity by registry implementations.
   */
  device_id: string;
  /**
   * Transport type accepted by the Receiver in URN format
   */
  transport: {
    [k: string]: unknown;
  } & string;
  /**
   * Binding of Receiver ingress ports to interfaces on the parent Node.
   */
  interface_bindings: string[];
  /**
   * Object containing the 'sender_id' currently subscribed to.
   */
  subscription: {
    /**
     * UUID of the Sender that this Receiver is currently subscribed to
     */
    sender_id: string | null;
    /**
     * Receiver is enabled and configured with a Sender's connection parameters
     */
    active: boolean;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Describes an audio Receiver
 */
export type AudioReceiverResource = ReceiverResource1 & {
  /**
   * Type of Flow accepted by the Receiver as a URN
   */
  format: "urn:x-nmos:format:audio";
  /**
   * Capabilities
   */
  caps: {
    /**
     * Subclassification of the formats accepted using IANA assigned media types
     */
    media_types?: [
      (
        | ("audio/L24" | "audio/L20" | "audio/L16" | "audio/L8")
        | {
            [k: string]: unknown;
          }
      ) &
        string,
      ...((
        | ("audio/L24" | "audio/L20" | "audio/L16" | "audio/L8")
        | {
            [k: string]: unknown;
          }
      ) &
        string)[]
    ];
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Describes a data Receiver
 */
export type DataReceiverResource = ReceiverResource1 & {
  /**
   * Type of Flow accepted by the Receiver as a URN
   */
  format: "urn:x-nmos:format:data";
  /**
   * Capabilities
   */
  caps: {
    /**
     * Subclassification of the formats accepted using IANA assigned media types
     */
    media_types?: [
      (
        | ("video/smpte291" | "application/json")
        | {
            [k: string]: unknown;
          }
      ) &
        string,
      ...((
        | ("video/smpte291" | "application/json")
        | {
            [k: string]: unknown;
          }
      ) &
        string)[]
    ];
    /**
     * Subclassification of the event types accepted defined by the AMWA IS-07 specification
     */
    event_types?: [string, ...string[]];
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Describes a mux Receiver
 */
export type MuxReceiverResource = ReceiverResource1 & {
  /**
   * Type of Flow accepted by the Receiver as a URN
   */
  format: "urn:x-nmos:format:mux";
  /**
   * Capabilities
   */
  caps: {
    /**
     * Subclassification of the formats accepted using IANA assigned media types
     */
    media_types?: [
      (
        | "video/SMPTE2022-6"
        | {
            [k: string]: unknown;
          }
      ) &
        string,
      ...((
        | "video/SMPTE2022-6"
        | {
            [k: string]: unknown;
          }
      ) &
        string)[]
    ];
    [k: string]: unknown;
  };
  [k: string]: unknown;
};

/**
 * Describes the foundations of all NMOS resources
 */
export interface BaseResource {
  /**
   * Globally unique identifier for the resource
   */
  id: string;
  /**
   * String formatted TAI timestamp (<seconds>:<nanoseconds>) indicating precisely when an attribute of the resource last changed
   */
  version: string;
  /**
   * Freeform string label for the resource
   */
  label: string;
  /**
   * Detailed description of the resource
   */
  description: string;
  /**
   * Key value set of freeform string tags to aid in filtering resources. Values should be represented as an array of strings. Can be empty.
   */
  tags: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "".
     */
    [k: string]: string[];
  };
  [k: string]: unknown;
}
/**
 * Describes a clock with no external reference
 */
export interface ClockWithNoExternalReference {
  /**
   * Name of this refclock (unique for this set of clocks)
   */
  name: string;
  /**
   * Type of external reference used by this clock
   */
  ref_type: "internal";
  [k: string]: unknown;
}
/**
 * Describes a clock referenced to PTP
 */
export interface PTPClock {
  /**
   * Name of this refclock (unique for this set of clocks)
   */
  name: string;
  /**
   * Type of external reference used by this clock
   */
  ref_type: "ptp";
  /**
   * External refclock is synchronised to International Atomic Time (TAI)
   */
  traceable: boolean;
  /**
   * Version of PTP reference used by this clock
   */
  version: "IEEE1588-2008";
  /**
   * ID of the PTP reference used by this clock
   */
  gmid: string;
  /**
   * Lock state of this clock to the external reference. If true, this device is slaved, otherwise it has no defined relationship to the external reference
   */
  locked: boolean;
  [k: string]: unknown;
}
export interface Component {
  /**
   * Label for this channel (free text)
   */
  label: string;
  /**
   * Symbol for this channel (from VSF TR-03 Appendix A)
   */
  symbol?: (
    | (
        | "L"
        | "R"
        | "C"
        | "LFE"
        | "Ls"
        | "Rs"
        | "Lss"
        | "Rss"
        | "Lrs"
        | "Rrs"
        | "Lc"
        | "Rc"
        | "Cs"
        | "HI"
        | "VIN"
        | "M1"
        | "M2"
        | "Lt"
        | "Rt"
        | "Lst"
        | "Rst"
        | "S"
      )
    | {
        [k: string]: unknown;
      }
    | {
        [k: string]: unknown;
      }
  ) &
    string;
  [k: string]: unknown;
}
export interface Component1 {
  /**
   * Name of this component
   */
  name: "Y" | "Cb" | "Cr" | "I" | "Ct" | "Cp" | "A" | "R" | "G" | "B" | "DepthMap";
  /**
   * Width of this component in pixels
   */
  width: number;
  /**
   * Height of this component in pixels
   */
  height: number;
  /**
   * Number of bits used to describe each sample
   */
  bit_depth: number;
  [k: string]: unknown;
}
export interface Entry {
  /**
   * Data identification word
   */
  DID?: string;
  /**
   * Secondary data identification word
   */
  SDID?: string;
  [k: string]: unknown;
}
