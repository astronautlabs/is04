/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Describes the Node and the services which run on it
 */
export type NodeResource = BaseResource & {
  /**
   * HTTP access href for the Node's API (deprecated)
   */
  href: string;
  /**
   * Node hostname (optional, deprecated)
   */
  hostname?: string;
  /**
   * URL fragments required to connect to the Node API
   */
  api: {
    /**
     * Supported API versions running on this Node
     */
    versions: string[];
    /**
     * Host, port and protocol details required to connect to the API
     */
    endpoints: {
      /**
       * IP address or hostname which the Node API is running on
       */
      host: (
        | {
            [k: string]: unknown;
          }
        | {
            [k: string]: unknown;
          }
        | {
            [k: string]: unknown;
          }
      ) &
        string;
      /**
       * Port number which the Node API is running on
       */
      port: number;
      /**
       * Protocol supported by this instance of the Node API
       */
      protocol: "http" | "https";
      /**
       * This endpoint requires authorization
       */
      authorization?: boolean;
      [k: string]: unknown;
    }[];
    [k: string]: unknown;
  };
  /**
   * Capabilities (not yet defined)
   */
  caps: {
    [k: string]: unknown;
  };
  /**
   * Array of objects containing a URN format type and href
   */
  services: {
    /**
     * URL to reach a service running on the Node
     */
    href: string;
    /**
     * URN identifying the type of service
     */
    type: string;
    /**
     * This endpoint requires authorization
     */
    authorization?: boolean;
    [k: string]: unknown;
  }[];
  /**
   * Clocks made available to Devices owned by this Node
   */
  clocks: (ClockWithNoExternalReference | PTPClock)[];
  /**
   * Network interfaces made available to devices owned by this Node. Port IDs and Chassis IDs are used to inform topology discovery via IS-06, and require that interfaces implement ARP at a minimum, and ideally LLDP.
   */
  interfaces: {
    /**
     * Chassis ID of the interface, as signalled in LLDP from this node. Set to null where LLDP is unsuitable for use (ie. virtualised environments)
     */
    chassis_id: string | string | null;
    /**
     * Port ID of the interface, as signalled in LLDP or via ARP responses from this node. Must be a MAC address
     */
    port_id: string;
    /**
     * Name of the interface (unique in scope of this node).  This attribute is used by sub-resources of this node such as senders and receivers to refer to interfaces to which they are bound.
     */
    name: string;
    attached_network_device?: {
      /**
       * Chassis ID of the attached network device, as signalled in LLDP received by this Node.
       */
      chassis_id: string | string;
      /**
       * Port ID of the attached network device, as signalled in LLDP received by this Node.
       */
      port_id: string | string;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  }[];
  [k: string]: unknown;
};
/**
 * A list of Node resources
 */
export type CollectionOfNodes = NodeResource[];

/**
 * Describes the foundations of all NMOS resources
 */
export interface BaseResource {
  /**
   * Globally unique identifier for the resource
   */
  id: string;
  /**
   * String formatted TAI timestamp (<seconds>:<nanoseconds>) indicating precisely when an attribute of the resource last changed
   */
  version: string;
  /**
   * Freeform string label for the resource
   */
  label: string;
  /**
   * Detailed description of the resource
   */
  description: string;
  /**
   * Key value set of freeform string tags to aid in filtering resources. Values should be represented as an array of strings. Can be empty.
   */
  tags: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "".
     */
    [k: string]: string[];
  };
  [k: string]: unknown;
}
/**
 * Describes a clock with no external reference
 */
export interface ClockWithNoExternalReference {
  /**
   * Name of this refclock (unique for this set of clocks)
   */
  name: string;
  /**
   * Type of external reference used by this clock
   */
  ref_type: "internal";
  [k: string]: unknown;
}
/**
 * Describes a clock referenced to PTP
 */
export interface PTPClock {
  /**
   * Name of this refclock (unique for this set of clocks)
   */
  name: string;
  /**
   * Type of external reference used by this clock
   */
  ref_type: "ptp";
  /**
   * External refclock is synchronised to International Atomic Time (TAI)
   */
  traceable: boolean;
  /**
   * Version of PTP reference used by this clock
   */
  version: "IEEE1588-2008";
  /**
   * ID of the PTP reference used by this clock
   */
  gmid: string;
  /**
   * Lock state of this clock to the external reference. If true, this device is slaved, otherwise it has no defined relationship to the external reference
   */
  locked: boolean;
  [k: string]: unknown;
}
