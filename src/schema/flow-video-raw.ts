/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Describes a raw Video Flow
 */
export type RawVideoFlowResource = VideoFlowResource & {
  /**
   * Subclassification of the format using IANA assigned media types
   */
  media_type: "video/raw";
  /**
   * Array of objects describing the components
   */
  components: [Component, ...Component[]];
  [k: string]: unknown;
};
/**
 * Describes a Video Flow
 */
export type VideoFlowResource = FlowResource & {
  /**
   * Format of the data coming from the Flow as a URN
   */
  format: "urn:x-nmos:format:video";
  /**
   * Width of the picture in pixels
   */
  frame_width: number;
  /**
   * Height of the picture in pixels
   */
  frame_height: number;
  /**
   * Interlaced video mode for frames in this Flow
   */
  interlace_mode?: "progressive" | "interlaced_tff" | "interlaced_bff" | "interlaced_psf";
  /**
   * Colorspace used for the video. Any values not defined in the enum should be defined in the NMOS Parameter Registers
   */
  colorspace: (
    | ("BT601" | "BT709" | "BT2020" | "BT2100")
    | {
        [k: string]: unknown;
      }
  ) &
    string;
  /**
   * Transfer characteristic. Any values not defined in the enum should be defined in the NMOS Parameter Registers
   */
  transfer_characteristic?: (
    | ("SDR" | "HLG" | "PQ")
    | {
        [k: string]: unknown;
      }
  ) &
    string;
  [k: string]: unknown;
};
/**
 * Describes a Flow
 */
export type FlowResource = BaseResource & {
  /**
   * Number of Grains per second for this Flow. Must be an integer division of, or equal to the Grain rate specified by the parent Source. Grain rate matches the frame rate for video (see NMOS Content Model). Specified for periodic Flows only.
   */
  grain_rate?: {
    /**
     * Numerator
     */
    numerator: number;
    /**
     * Denominator
     */
    denominator?: number;
    [k: string]: unknown;
  };
  /**
   * Globally unique identifier for the Source which initially created the Flow. This attribute is used to ensure referential integrity by registry implementations (v1.0 only).
   */
  source_id: string;
  /**
   * Globally unique identifier for the Device which initially created the Flow. This attribute is used to ensure referential integrity by registry implementations (v1.1 onwards).
   */
  device_id: string;
  /**
   * Array of UUIDs representing the Flow IDs of Grains which came together to generate this Flow (may change over the lifetime of this Flow)
   */
  parents: string[];
  [k: string]: unknown;
};

/**
 * Describes the foundations of all NMOS resources
 */
export interface BaseResource {
  /**
   * Globally unique identifier for the resource
   */
  id: string;
  /**
   * String formatted TAI timestamp (<seconds>:<nanoseconds>) indicating precisely when an attribute of the resource last changed
   */
  version: string;
  /**
   * Freeform string label for the resource
   */
  label: string;
  /**
   * Detailed description of the resource
   */
  description: string;
  /**
   * Key value set of freeform string tags to aid in filtering resources. Values should be represented as an array of strings. Can be empty.
   */
  tags: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "".
     */
    [k: string]: string[];
  };
  [k: string]: unknown;
}
export interface Component {
  /**
   * Name of this component
   */
  name: "Y" | "Cb" | "Cr" | "I" | "Ct" | "Cp" | "A" | "R" | "G" | "B" | "DepthMap";
  /**
   * Width of this component in pixels
   */
  width: number;
  /**
   * Height of this component in pixels
   */
  height: number;
  /**
   * Number of bits used to describe each sample
   */
  bit_depth: number;
  [k: string]: unknown;
}
